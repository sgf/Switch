#include <Switch/System/Drawing/Pen.hpp>
#include <Switch/System/Drawing/SolidBrush.hpp>
#include <gtest/gtest.h>

using namespace System;
using namespace System::Drawing;

namespace SwitchUnitTests {
  TEST(PenTest, ConstructorWithBrush) {
    Pen pen(SolidBrush {Color::Green});

    ASSERT_EQ(Color::Green, pen.Color);
    ASSERT_EQ(1.0f, pen.Width);
  }

  TEST(PenTest, ConstructorWithBrushAndWitdh) {
    Pen pen(SolidBrush {Color::Green}, 2.0f);

    ASSERT_EQ(Color::Green, pen.Color);
    ASSERT_EQ(2.0f, pen.Width);
  }

  TEST(PenTest, ConstructorWithColor) {
    Pen pen(Color::Green);

    ASSERT_EQ(Color::Green, pen.Color);
    ASSERT_EQ(1.0f, pen.Width);
  }

  TEST(PenTest, ConstructorWithColorAndWidth) {
    Pen pen(Color::Green, 2.0f);

    ASSERT_EQ(Color::Green, pen.Color);
    ASSERT_EQ(2.0f, pen.Width);
  }

  TEST(PenTest, CopyConstructor) {
    Pen pen1(Color::Green, 2.0f);

    Pen pen2 = pen1;

    ASSERT_EQ(Color::Green, pen2.Color);
    ASSERT_EQ(2.0f, pen2.Width);
  }

  TEST(PenTest, CopyOperator) {
    Pen pen1(Color::Green, 2.0f);
    Pen pen2(Color::Blue, 2.0f);

    pen2 = pen1;

    ASSERT_EQ(Color::Green, pen2.Color);
    ASSERT_EQ(2.0f, pen2.Width);
  }

  TEST(PenTest, Copy) {
    $<Pen> pen1 = new_<Pen>(Color::Green, 2.0f);

    $<Pen> pen2 = new_<Pen>(*pen1);
    pen1->Brush = SolidBrush(Color::Orange);
    pen1->Width = 1.0f;

    ASSERT_EQ(Color::Orange, pen2->Color);
    ASSERT_EQ(1.0f, pen2->Width);
  }

  TEST(PenTest, Clone) {
    $<Pen> pen1 = new_<Pen>(Color::Green, 2.0f);

    $<Pen> pen2 = as<Pen>(pen1->Clone());
    pen1->Color = Color::Orange;
    pen1->Width = 1.0f;

    ASSERT_EQ(Color::Green, pen2->Color);
    ASSERT_EQ(2.0f, pen2->Width);
  }
}
